let UnitTestingApp=function(){const _enabled=new WeakMap,_runningInGas=new WeakMap;class UnitTestingApp{constructor(){return UnitTestingApp.instance?UnitTestingApp.instance:(_enabled.set(this,!1),_runningInGas.set(this,!1),UnitTestingApp.instance=this,UnitTestingApp.instance)}enable(){_enabled.set(this,!0)}disable(){_enabled.set(this,!1)}get isEnabled(){return _enabled.get(this)}get isInGas(){return"undefined"!=typeof ScriptApp}get runningInGas(){return _runningInGas.get(this)}runInGas(bool=!0){_runningInGas.set(this,bool)}clearConsole(){console.clear&&console.clear()}assert(condition,message){if(_enabled.get(this)&&this.isInGas===this.runningInGas)try{"function"==typeof condition&&(condition=condition()),condition?console.log(`✔ PASSED: ${message}`):console.log(`❌ FAILED: ${message}`)}catch(err){console.log(`❌ FAILED: ${message} (${err})`)}}catchErr(callback,errorMessage,message){if(!_enabled.get(this))return;if(this.isInGas!==this.runningInGas)return;let error,isCaught=!1;try{callback()}catch(err){error=err,isCaught=new RegExp(errorMessage).test(err)}finally{this.assert(isCaught,message)}}is2dArray(array,message){if(_enabled.get(this)&&this.isInGas===this.runningInGas)try{"function"==typeof array&&(array=array()),this.assert(Array.isArray(array)&&Array.isArray(array[0]),message)}catch(err){this.assert(!1,`${message}: ${err}`)}}printHeader(text){this.isInGas===this.runningInGas&&(console.log("*********************"),console.log("* "+text),console.log("*********************"))}addNewTest(name,callback){UnitTestingApp.prototype[name]=callback}}return UnitTestingApp}();"undefined"!=typeof module&&(module.exports=UnitTestingApp);